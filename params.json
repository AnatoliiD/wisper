{"name":"Wisper","tagline":"Wisper is a Ruby library for decoupling and managing the dependencies of your domain models.","body":"# Wisper\r\n\r\nSimple pub/sub for Ruby objects\r\n\r\n[![Code Climate](https://codeclimate.com/github/krisleech/wisper.png)](https://codeclimate.com/github/krisleech/wisper)\r\n[![Build Status](https://travis-ci.org/krisleech/wisper.png?branch=master)](https://travis-ci.org/krisleech/wisper)\r\n\r\nWhile this is not dependent on Rails in any way it was extracted from a Rails\r\nproject and can used as an alternative to ActiveRecord callbacks and Observers.\r\n\r\nThe problem with callbacks and Observers is that they always happen. How many\r\ntimes have you wanted to do `User.create` without firing off a welcome email?\r\n\r\nIt is also super useful for integrating web socket notifications, statistics\r\nand activity streams in to your controller layer without coupling them to your \r\nmodels.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'wisper', '~>1.0.0'\r\n```\r\n\r\n## Usage\r\n\r\nAny class with the Wisper module included can broadcast events to subscribed\r\nlisteners. Listeners are added, at runtime, to the publishing object.\r\n\r\n### Publishing\r\n\r\n```ruby\r\nclass MyPublisher\r\n  include Wisper::Publisher\r\n\r\n  def do_something\r\n    # ...\r\n    publish(:done_something, self)\r\n  end\r\nend\r\n```\r\n\r\nWhen the publisher publishes an event it can pass any number of arguments which \r\nare passed on to the listeners.\r\n\r\n```ruby\r\npublish(:done_something, self, 'hello', 'world')\r\n```\r\n\r\n### Subscribing\r\n\r\n#### Listeners\r\n\r\nAny object can be a listener and by default they are only subscribed to events\r\nthey can respond to.\r\n\r\n```ruby\r\nmy_publisher = MyPublisher.new\r\nmy_publisher.subscribe(MyListener.new)\r\n```\r\n\r\n#### Blocks\r\n\r\nBlocks are subscribed to single events.\r\n\r\n```ruby\r\nmy_publisher = MyPublisher.new\r\nmy_publisher.on(:done_something) do |publisher|\r\n  # ...\r\nend\r\n```\r\n\r\n### Asynchronous Publishing\r\n\r\nPlease refer to the [wisper-async](https://github.com/krisleech/wisper-async) gem.\r\n\r\n### ActiveRecord\r\n\r\n```ruby\r\nclass Bid < ActiveRecord::Base\r\n  include Wisper::Publisher\r\n\r\n  validates :amount, :presence => true\r\n\r\n  def commit(_attrs = nil)\r\n    assign_attributes(_attrs) if _attrs.present?\r\n    if valid?\r\n      save!\r\n      publish(:create_bid_successful, self)\r\n    else\r\n      publish(:create_bid_failed, self)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### ActionController\r\n\r\n```ruby\r\nclass BidsController < ApplicationController\r\n  def new\r\n    @bid = Bid.new\r\n  end\r\n\r\n  def create\r\n    @bid = Bid.new(params[:bid])\r\n\r\n    @bid.subscribe(PusherListener.new)\r\n    @bid.subscribe(ActivityListener.new)\r\n    @bid.subscribe(StatisticsListener.new)\r\n\r\n    @bid.on(:create_bid_successful) { |bid| redirect_to bid }\r\n    @bid.on(:create_bid_failed)     { |bid| render :action => :new }\r\n\r\n    @bid.commit\r\n  end\r\nend\r\n```\r\n\r\nA full CRUD example is shown in the [Wiki](https://github.com/krisleech/wisper/wiki).\r\n\r\n### Service/Use Case/Command objects\r\n\r\nA Service object is useful when an operation is complex, interacts with more\r\nthan one model, accesses an external API or would burden a model with too much\r\nresponsibility.\r\n\r\n```ruby\r\nclass PlayerJoiningTeam\r\n  include Wisper::Publisher\r\n\r\n  def execute(player, team)\r\n    membership = Membership.new(player, team)\r\n\r\n    if membership.valid?\r\n      membership.save!\r\n      email_player(player, team)\r\n      assign_first_mission(player, team)\r\n      publish(:player_joining_team_successful, player, team)\r\n    else\r\n      publish(:player_joining_team_failed, player, team)\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def email_player(player, team)\r\n    # ...\r\n  end\r\n\r\n  def assign_first_mission(player, team)\r\n    # ...\r\n  end\r\nend\r\n```\r\n\r\n### Example listeners\r\n\r\nThese are typical app wide listeners which have a method for pretty much every\r\nevent which is broadcast.\r\n\r\n```ruby\r\nclass PusherListener\r\n  def create_thing_successful(thing)\r\n    # ...\r\n  end\r\nend\r\n\r\nclass ActivityListener\r\n  def create_thing_successful(thing)\r\n    # ...\r\n  end\r\nend\r\n\r\nclass StatisticsListener\r\n  def create_thing_successful(thing)\r\n    # ...\r\n  end\r\nend\r\n\r\nclass CacheListener\r\n  def create_thing_successful(thing)\r\n    # ...\r\n  end\r\nend\r\n\r\nclass IndexingListener\r\n  def create_thing_successful(thing)\r\n    # ...\r\n  end\r\nend\r\n```\r\n\r\n## Global listeners\r\n\r\nIf you become tired of adding the same listeners to _every_ publisher you can\r\nadd global listeners. They receive all published events which they can respond\r\nto.\r\n\r\nHowever it means that when looking at the code it will not be obvious that the\r\nglobal listeners are being executed in additional to the regular listeners.\r\n\r\n```ruby\r\nWisper.add_listener(MyListener.new)\r\n```\r\n\r\nIn a Rails app you might want to add your global listeners in an initalizer.\r\n\r\nGlobal listeners are threadsafe.\r\n\r\n## Temporary Global Listeners\r\n\r\nYou can also globally subscribe listeners for the duration of a block.\r\n\r\n```ruby\r\nWisper.with_listeners(MyListener.new, OtherListener.new) do\r\n  # do stuff\r\nend\r\n```\r\n\r\nAny events broadcast within the block by any publisher will be sent to the\r\nlisteners. This is useful if you have a child object which publishes an event\r\nwhich is not bubbled down to a parent publisher.\r\n\r\nTemporary Global Listeners are threadsafe.\r\n\r\n## Subscribing to selected events\r\n\r\nBy default a listener will get notified of all events it can respond to. You\r\ncan limit which events a listener is notified of by passing an event or array\r\nof events to `:on`.\r\n\r\n```ruby\r\npost_creater.subscribe(PusherListener.new, :on => :create_post_successful)\r\n```\r\n\r\n## Mapping event to a different method\r\n\r\nBy default the method called on the subscriber is the same as the event\r\nbroadcast. However it can be mapped to a different method using `:with`.\r\n\r\n```ruby\r\nreport_creator.subscribe(MailResponder.new, :with => :successful)\r\n```\r\n\r\nIn the above case it is pretty useless unless used in conjuction with `:on`\r\nsince all events will get mapped to `:successful`. Instead you might do\r\nsomething like this:\r\n\r\n```ruby\r\nreport_creator.subscribe(MailResponder.new, :on   => :create_report_successful,\r\n                                            :with => :successful)\r\n```\r\n\r\nIf you pass an array of events to `:on` each event will be mapped to the same\r\nmethod when `:with` is specified. If you need to listen for select events\r\n_and_ map each one to a different method subscribe the listener once for\r\neach mapping:\r\n\r\n```ruby\r\nreport_creator.subscribe(MailResponder.new, :on   => :create_report_successful,\r\n                                            :with => :successful)\r\n\r\nreport_creator.subscribe(MailResponder.new, :on   => :create_report_failed,\r\n                                            :with => :failed)\r\n```\r\n\r\n## Chaining subscriptions\r\n\r\n```ruby\r\npost.on(:success) { |post| redirect_to post }\r\n    .on(:failure) { |post| render :action => :edit, :locals => :post => post }\r\n```\r\n\r\n## RSpec\r\n\r\nWisper comes with a method for stubbing event publishers so that you can create isolation tests\r\nthat only care about reacting to events.\r\n\r\nGiven this piece of code:\r\n\r\n```ruby\r\nclass CodeThatReactsToEvents\r\n  def do_something\r\n    publisher = MyPublisher.new\r\n    publisher.on(:some_event) do |variable|\r\n      return \"Hello with #{variable}!\"\r\n    end\r\n    publisher.execute\r\n  end\r\nend\r\n```\r\n\r\nYou can test it like this:\r\n\r\n```ruby\r\nrequire 'wisper/rspec/stub_wisper_publisher'\r\n\r\ndescribe CodeThatReactsToEvents do\r\n  context \"on some_event\" do\r\n    before do\r\n      stub_wisper_publisher(\"MyPublisher\", :execute, :some_event, \"foo\")\r\n    end\r\n\r\n    it \"renders\" do\r\n      response = CodeThatReactsToEvents.new.do_something\r\n      response.should == \"Hello with foo!\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis becomes important when testing, for example, Rails controllers in\r\nisolation from the business logic.  This technique is used at the controller\r\nlayer to isolate testing the controller from testing the encapsulated business\r\nlogic.\r\n\r\nYou can use any number of args to pass to the event:\r\n\r\n```ruby\r\nstub_wisper_publisher(\"MyPublisher\", :execute, :some_event, \"foo1\", \"foo2\", ...)\r\n```\r\n\r\nSee `spec/lib/rspec_extensions_spec.rb` for a runnable example.\r\n\r\n## Compatibility\r\n\r\nTested with MRI 1.9.x, MRI 2.0.0, JRuby (1.9 and 2.0 mode) and Rubinius (1.9\r\nmode).\r\nSee the [build status](https://travis-ci.org/krisleech/wisper) for details.\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Kris Leech\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the 'Software'), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}